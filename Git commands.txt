
git --version

git config --global user.name "Likith,Raj"

git config --global user.email "likith.raj@visma.com"

git config --list

git help <command>
	Eg: git help add

pwd

cd ..

cd 'Sample Directory' 

git init

ls -la ---to see hidden files

git add ""

git commit -m "comment"

git config --global -e


git diff (working area and staged area)

git diff --staged( staged area and local repository)

The below command is used to connect the local repo with the central repo
git remote add origin "https://github.com/likithraaj88/TestRepo.git"

To show the repository url from git bash
git remote show origin 

The below command can be used to solve the error "fatal: refusing to merge unrelated histories"
git pull origin master --allow-unrelated-histories

Below query is used to create a branch:
git branch develop

Switch to branch:
git checkout develop

To findout number of branches: 
git branch


To merge develop branch to master follow the steps:
1. Checkout to master branch
2. git merge develop(develop branch will be merged to master)
3. git push origin master

How to pull from master branch to another branch(dummy branch):
1. Checkout to the destination branch i.e. dummy branch
2. git pull origin master
3. git push origin dummy branch


Clone a repo to local :
git clone "url of repo"


Revert the commit: Move file from stage area to working directory i.e. after commiting
git reset HEAD~


git checkout -- <filename> to discard changes in working directory


to delete file
rm <filename> 

To delete multiple files under folder1
rm -rf <folder1>


to check all the commits:
git log --oneline


Rename file:
git mv <old file name> <new file name>

Move file to diff folder:
git <filename> <folder>


How to check commit history:
git log
git log --oneline --graph --decorate
git log --since="2 days ago"
git log -- <filename>
git show <commitId>

For more info on log use below
git help log


ALIAS:
-------------------------

git config alias.newCommand "log --since="2 days ago""

git newCommand- will give same output as the git log --since="2 days ago"

------------------------



Exclude unwanted files:
------------------------

Hidden files:
ls -al

----------------



GIT Comparisions:
---------------------------------------------------------------
To view the content of README.md file
 cat README.md
 
To see the difference between working dir and staging area:

	git diff
	git diff <filename>

To see the difference between working dir and repo area(last commit):
	git diff HEAD
	git diff HEAD <filename>


To see the difference between staging area and repo area:
	git diff --staged
	git diff --staged HEAD
	git diff --staged HEAD <filename>


-------------------------------------------------------------



Rebase:
---------------------------------------------------------------
It is an alternative for merge
If we want to rebase master to develop branch then checkout to develop branch
git rebase master

git log --graph --oneline --decorate --all

---------------------------------------------------------------


stash:
---------------------------------------------------------------
To stash a tracked file
	git stash

To see the list of file which are stacked
	git stash list

To revert the stash file
	git stash apply


This shows all the files that are being tracked by git
	git ls-files


To stash an untracked file i.e. the file which is not in stage
	git stash -u 

To stash all files i.e either tracked or untracked files
git stash -a 


This command reverts the stashed file to working directory and drops from the stashed file
	git stash pop 


To stash with a message:
	git stash save "comments for stash"


To see a particular stash 
	git stash show stash@{index}	
	      Eg:git stash show stash@{1}

To apply particular stash
	git stash apply stash@{1}

To drop a particular stash
	git stash drop stash@{1}


To clear out all stash
	git stash clear

To create a new bracnh to hold all the stashed files
	git stash branch <newBranch>

To merge a stahshed branch on to master
	CHeckout to master
		git checkout master
	merge trhe stashed branch
		git merge <stashed branch>

---------------------------------------------------------------


Tagging:
---------------------------------------------------------------
To create a tag:
	git tag <tagname>

To know the list of tags
	git tag --list

To delete a tag
	git tag --delete <tagname>


To create an annotated tag
	git tag -a <tagname>
	Enter the necessary information 

How to show a tag:
	git show <tagname>
	

Compare tags:
	gti diff <tag1> <tag2>






Common Mistakes:
---------------------------------------------------------------

To revert changes in a file to its original version (if in case something has been accidentally added in the working area)

	git checkout <filename>


To modify the latest commit message:
	git commit --amend -m "New message"	


To revert to a particular commit: 
	Soft reset:
	git reset --soft <commitid>
	Note: After the target commit, all the files or changes will be moved to staging area

	Reset:
	git reset <commitid>
	Note: After the target commit, all the files or changes will be moved to working area

	Hard reset:
	git reset --hard <commitid>
	Note: After the target commit, no files or changes will be t



---------------------------------------------------------------











Branching:
---------------
To show the branches 
	git branch -a

To create a branch
	git branch <branchName>

To switch to other branch
	git checkout <branchname>

To rename a branch
	git branch -m <oldBranchName> <newBranchName>

To delete a branch
	 git branch -d master
	A branch cannot be deleted if we are in the same branch

To merge develop branch to master branch:
	Checkout to destination branch
		git checkout master
	Merge develop branch to master
		git merge develop

To see the changes in branches
git log --oneline --graph --decorate --all

----------------------------------------------------------------